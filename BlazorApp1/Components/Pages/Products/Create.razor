@page "/products/create"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer
@attribute [Authorize]

<h1>Novo Produto</h1>
<EditForm Model="@Model" OnValidSubmit="OnvalidSubmitAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label class="form-label">Nome do Produto</label>
        <InputText @bind-Value = "Model.Title" class="form-control"></InputText>
        <ValidationMessage For="@(() => Model.Title)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Preço</label>
        <InputNumber @bind-Value = "Model.Price" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => Model.Price)"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label class="form-label">Categoria</label>
        <InputSelect @bind-Value = "Model.CategoryId" class="form-control">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">
        Criar Produto
    </button>
    <a href="/products">Cancelar</a>



</EditForm>




@code
{
    public Product Model {get; set;} = new();
    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();

    protected override async void OnInitialized()
    {
        Categories = await Context
        .Categories
        .AsNoTracking()
        .OrderBy(x => x.Title)
        .ToListAsync();
    }


    public async Task OnvalidSubmitAsync()
    {
        await Context.Products.AddAsync(Model);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }

}
